alias physicalSP S0;
alias newPCB S1;
alias newPID S2;
alias newPTBR S3;
alias i S4;
alias j S5;
alias k S6;
alias l S7;

physicalSP = ([PTBR + 2 * (SP / 512)] * 512) + (SP % 512);

if ([physicalSP - 1] == 8) then
	//	Check for free PCB
	newPCB = READY_LIST;
	while (newPCB < 2560 && [newPCB + 1] != 0) do
		newPCB = newPCB + 32;
	endwhile;
	if (newPCB == 2560) then
		[physicalSP - 2] = -1;
		ireturn;
	endif;
	newPID = (newPCB - READY_LIST) / 32;
	newPTBR = 1024 + 8 * newPID;

	//	Check For Free Memory
	i = 25;
	while (i < 64 && [MEM_LIST + i] != 0) do
		i = i + 1;
	endwhile;


	if (i == 64) then
		j = PTBR + 8;
		i = -1;
		while (i == -1) do
			if (j == 1280) then
				j = 1024;
			endif;
			if ([j + 1] == "11" && [MEM_LIST + [j]] == 1) then
				[j + 1] = "01";
			else
				if ([j + 1] == "01") then
					i = [j];
					if ([MEM_LIST + i] > 1) then
						i = -1;
					else
						k = 448;
						while (k < 512 && [DISK_LIST + k] != 0) do
							k = k + 1;
						endwhile;
						if (k == 512) then
							[physicalSP - 2] = -1;
							ireturn;
						endif;
						store(i, k);
						[DISK_LIST + k] = 1;
						[j] = k;
						[j + 1] = "00";
					endif;
				endif;
			endif;
			j = j + 2;
			if (j % 8 == 6) then
				j = j + 2;
			endif;
		endwhile;
	else
		[MEM_LIST + i] = 1;
	endif;
	
	
	//	Copy Over Stack Page
	j = 0;
	k = [PTBR + 6] * 512;
	l = i * 512;
	while (j < 512) do
		[l + j] = [k + j];
		j = j + 1;
	endwhile;


	//	Initialize PTBR
	[newPTBR + 6] = i;
	[newPTBR + 7] = "01";
	j = 0;
	while (j < 6) do
		k = PTBR + j;
		l = [k + 1];
		[newPTBR + j] = [k];
		[newPTBR + j + 1] = l;
		if (l == "01" || l == "11") then
			[MEM_LIST + [k]] = [MEM_LIST + [k]] + 1;
		endif;
		if (l == "00" && [k] > 447) then
			[DISK_LIST + [k]] = [DISK_LIST + [k]] + 1;
		endif;
		j = j + 2;
	endwhile;



	//	Set up Forked PCB
	[newPCB] = newPID;
	[newPCB + 2] = BP;
	[newPCB + 3] = SP - 1;
	[newPCB + 4] = [physicalSP];
	[newPCB + 5] = newPTBR;
	[newPCB + 6] = PTLR;
	[newPCB + 7] = R0;
	[newPCB + 8] = R1;
	[newPCB + 9] = R2;
	[newPCB + 10] = R3;
	[newPCB + 11] = R4;
	[newPCB + 12] = R5;
	[newPCB + 13] = R6;
	[newPCB + 14] = R7;
	[newPCB + 31] = (PTBR - 1024) / 8;
	[newPCB + 1] = 1;
	k = 15;
	j = READY_LIST + (PTBR - 1024) * 4;
	while (k < 31) do
		if ([j + k] != -1) then
			[FILE_TABLE + 2 * [j + k] + 1] = [FILE_TABLE + 2 * [j + k] + 1] + 1;
		endif;
		[newPCB + k] = [j + k];
		[newPCB + k + 1] = [j + k + 1];
		k = k + 2;
	endwhile;
	[physicalSP - 2] = newPID;
	[(i * 512) + ((SP - 1) % 512) - 1] = -2;
	ireturn; 
endif;